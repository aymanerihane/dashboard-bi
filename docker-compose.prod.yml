services:
  # PostgreSQL database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-dashboard_prod}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-your_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-dashboard_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dashboard-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-your_secure_password}@postgres:5432/${DATABASE_NAME:-dashboard_prod}
      JWT_SECRET: ${JWT_SECRET:-your_very_secure_jwt_secret_key}
      ENVIRONMENT: production
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dashboard-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:8000}
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:8000}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - dashboard-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    networks:
      - dashboard-network

volumes:
  postgres_data:

networks:
  dashboard-network:
    driver: bridge
